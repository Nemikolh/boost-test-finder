#!/usr/bin/env python

import argparse
import os
import os.path

from os.path import join

# Parser Arguments
parser = argparse.ArgumentParser(description='Automatically generate a makefile for Boost.Test framework.')
parser.add_argument('inputs', metavar='file|folder', type=str, nargs='+',
                   help='A folder or C++ file containing Boost.Test case.')
parser.add_argument('-o', '--output', dest='makefile', help='Path of the output makefile', default='makefile')
parser.add_argument('-l', '--libraries', type=str, nargs='*', dest='libraries', help='Additional libraries to link with', default='')
parser.add_argument('-f', '--flags', type=str, nargs='*', dest='flags', help='Additional compiler flags', default='')
parser.add_argument('--runner', type=str, dest='runner', help='Name of the executable.', default='test_runner')
parser.add_argument('--compiler', type=str, dest='compiler', help='Compiler to use.', default='g++')

def makefile_body(sources, runner, compiler, flags = "", additional_libraries = ""):
    result = ("# ------------------------------------------------------\n"
              "# Makefile Generated by Boost.Test finder python script.\n"
              "# ------------------------------------------------------\n"
              "\nCXXFLAGS = -g -Wall -D_REENTRANT " + flags + "\n"
              "\nLIBS = -lboost_unit_test_framework " + additional_libraries + "\n"
              "\nSOURCES = " + sources + "\n"
              "\nOBJECTS = $(subst .cpp,.o,$(SOURCES))\n"
              "\nDFILES  = $(subst .cpp,.d,$(SOURCES))\n"
              "\nall: $(OBJECTS)\n"
              "\t" + compiler + " -o " + runner +" $(CXXFLAGS) $(OBJECTS) $(LIBS)\n"
              "\nrun:\n"
              "\t./" + runner + " --log_level=test_suite\n"
              "\n-include $(subst .cpp,.d,$(SOURCES))\n"
              "\n%.d: %.cpp\n"
              "\t" + compiler + " -MM $(CXXFLAGS) $< > $@.$$$$; \\\n"
              "sed 's,\\($*\\)\\.o[ :]*,\\1.o $@ : ,g' < $@.$$$$ > $@; \\\n"
              "rm -f $@.$$$$ \n"
              "\nclean:\n"
              "\trm $(OBJECTS) $(DFILES) " + runner + "\n"
              "")
    return result

def add_prefix(alist, prefix):
    return [prefix+elt for elt in alist]

def flatten(alist, separator = ' '):
    return separator.join(alist)

def file_include_boost_unit_test(name):
    #open the file using `with` context manager, it'll automatically close the file for you
    with open(name) as f:
        w = "boost/test/unit_test.hpp"
        found = False
        #iterate over the file one line at a time(memory efficient)
        for line in f:
            #if re.search("\b{0}\b".format(w),line):
            if w in line:
                found = True
        return found

def is_boost_test_file(name):
    return name.endswith('.cpp') and file_include_boost_unit_test(name)

def list_of_files(folder_path):
    outlist = []
    for root, dirs, files in os.walk(folder_path):
        for name in files:
            if is_boost_test_file(join(root, name)):
                outlist.append(join(root, name))
    return outlist

def walk_over_test(list):
    outlist = []
    for path in list:
        if os.path.isfile(path):
            if is_boost_test_file(path):
                outlist.append(path)
        elif os.path.isdir(path):
            outlist += list_of_files(path)
    return outlist

def clean_path(path):
    return os.path.abspath(os.path.normpath(os.path.expanduser(path)))

def clean_paths(list):
    return map(lambda x: clean_path(x), list)

def relpath(path, list):
    outlist = []
    for p in list:
        outlist.append(os.path.relpath(p, path))
    return outlist

#--------------------------------------------------------------------------------------------------#
# main function
def main():
    args = parser.parse_args()
    input_list = args.inputs
    makefile = args.makefile
    library_list = args.libraries
    flags_list = args.flags

    makefile_folder = os.path.dirname(clean_path(makefile))

    if not os.path.exists(makefile_folder):
        print makefile_folder, ' does not exist'
        exit(1)
    else:
        makefile_content = makefile_body(
         flatten(relpath(makefile_folder, clean_paths(walk_over_test(input_list)))),
         args.runner,
         args.compiler,
         flatten(add_prefix(flags_list, '-D')),
         flatten(add_prefix(library_list, '-l')))

        with open(clean_path(makefile), 'w') as f:
            f.write(makefile_content)


if __name__ == '__main__':
    main()
